(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "moment"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("moment"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.moment);
    global.tsAggsChartJs = mod.exports;
  }
})(typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : this, function (_exports, _moment) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.dataToChartJs = void 0;
  _moment = _interopRequireDefault(_moment);
  function _interopRequireDefault(e) { return e && e.__esModule ? e : { "default": e }; }
  var startOfWeek = function startOfWeek(m, weekstart) {
    if (weekstart === undefined) {
      weekstart = 0;
    }
    var mws = weekstart + 1 > 6 ? 0 : weekstart + 1,
      diff = m.day() - mws;
    return (0, _moment["default"])(m).subtract(diff < 0 ? diff + 7 : diff, 'days');
  };
  var getLabels = function getLabels(res) {
    return Object.keys(res).map(function (k) {
      return parseInt(k, 10);
    }).sort();
  };
  var toChartView = function toChartView(keys, res, status, cb) {
    var key,
      dataset = {
        data: []
      };
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      dataset['data'].push(res[key]);
    }
    return cb ? cb(dataset, status) : dataset;
  };
  var normalizers = {
    h: function h(map, oneHour, startMoment, endMoment) {
      var ndays = endMoment.diff(startMoment, 'days') + 1;
      var ts = startMoment.valueOf() / 1000,
        i = 0;
      while (i < 24 * ndays) {
        if (!map.hasOwnProperty(ts)) {
          map[ts] = 0;
        }
        ts += oneHour;
        i++;
      }
      return map;
    },
    d: function d(map, oneDay, startMoment, endMoment) {
      var ndays = endMoment.diff(startMoment, 'days') + 1;
      var ts = startMoment.valueOf() / 1000,
        i = 0;
      while (i < ndays) {
        if (!map.hasOwnProperty(ts)) {
          map[ts] = 0;
        }
        ts += oneDay;
        i++;
      }
      return map;
    },
    w: function w(map, oneDay, startMoment, endMoment) {
      var weekstartMoment = startOfWeek(startMoment),
        d = (0, _moment["default"])(weekstartMoment);
      var grid_m = null;
      while (d <= endMoment) {
        if (grid_m === null) {
          grid_m = startMoment;
        } else {
          grid_m = d;
        }
        grid_m = grid_m.valueOf() / 1000;
        if (!map.hasOwnProperty(grid_m)) {
          map[grid_m] = 0;
        }
        d.add(7 * 86400, 'seconds');
      }
      return map;
    },
    m: function m(map, oneDay, startMoment, endMoment) {
      var monthstartMoment = (0, _moment["default"])(startMoment).date(1),
        d = (0, _moment["default"])(monthstartMoment),
        year = d.year();
      var grid_m = null,
        m = d.month();
      function daysInMonth(m, year) {
        if (m >= 12) {
          year += Math.floor(m / 12);
        }
        m %= 12;
        if (m === 1 && (year % 4 === 0 && year % 100 !== 0 || year % 400 === 0)) {
          return 29;
        } else if (m === 1) {
          return 28;
        } else if (m < 7 && m % 2 === 0 || m >= 7 && m % 2 === 1) {
          return 31;
        } else {
          return 30;
        }
      }
      while (d <= endMoment) {
        if (grid_m === null) {
          grid_m = startMoment;
        } else {
          grid_m = d;
        }
        grid_m = grid_m.valueOf() / 1000;
        if (!map.hasOwnProperty(grid_m)) {
          map[grid_m] = 0;
        }
        d.add(daysInMonth(m, year) * oneDay, 'seconds');
        m++;
      }
      return map;
    }
  };
  var getMetrics = function getMetrics(grouping) {
    if (grouping === 'h') {
      return 3600;
    }
    return 86400;
  };
  var dataToChartJs = _exports.dataToChartJs = function dataToChartJs(res, start_date, end_date, grp, cb) {
    var startMoment = (0, _moment["default"])(start_date),
      endMoment = (0, _moment["default"])(end_date),
      val,
      key,
      maxValue = null,
      ts = 0,
      rCounter = 0,
      data = {},
      keys = [],
      labels = [],
      datasets = [];
    endMoment.hours(23).minutes(59).minutes(59).milliseconds(999);
    startMoment.subtract(startMoment._d.getTimezoneOffset(), 'minutes');
    startMoment.utc();
    endMoment.subtract(endMoment._d.getTimezoneOffset(), 'seconds');
    endMoment.utc();
    var metrics = getMetrics(grp);
    while ((val = res.shift()) !== undefined) {
      if (typeof val === 'string') {
        keys.push(val);
      } else if (maxValue === null) {
        maxValue = val;
      } else if (rCounter === 0) {
        ts = val * metrics;
        rCounter++;
      } else if (val === -1) {
        rCounter = 0;
      } else {
        key = keys[rCounter - 1];
        if (!data.hasOwnProperty(key)) {
          data[key] = {};
        }
        data[key][ts] = val;
        rCounter++;
      }
    }
    while (key = keys.shift()) {
      if (!data.hasOwnProperty(key)) {
        data[key] = {};
      }
      var dataset = normalizers[grp](data[key], metrics, startMoment, endMoment);
      if (key === 'all') {
        labels = getLabels(dataset);
      }
      datasets.push(toChartView(labels, dataset, key, cb));
    }
    return {
      datasets: datasets,
      maxValue: maxValue,
      labels: labels
    };
  };
});